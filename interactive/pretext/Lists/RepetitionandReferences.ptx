<?xml version="1.0"?>
<section xml:id="lists_repetition-and-references">
  <title>Repetition and References</title>
  <p>We have already seen the repetition operator working on strings as well as lists.  For example,</p>
  <program xml:id="repref1" interactive="activecode" language="python">
    <input>
origlist = [45, 76, 34, 55]
print(origlist * 3)
    </input>
  </program>
  <p>With a list, the repetition operator creates copies of the references.  Although this may seem simple enough, when we allow a list to refer to another list, a subtle problem can arise.</p>
  <p>Consider the following extension on the previous example.</p>
  <program xml:id="repref2" interactive="activecode" language="python">
    <input>
origlist = [45, 76, 34, 55]
print(origlist * 3)

newlist = [origlist] * 3

print(newlist)
    </input>
  </program>
  <p>
    <c>newlist</c> is a list of three references to <c>origlist</c> that were created by the repetition operator.  The reference diagram is shown below.</p>
  <image source="Lists/Figures/refrep1.png" width="50%" alt="Repetition of a nested list"/>
  <p>Now, what happens if we modify a value in <c>origlist</c>.
  </p>
  <program xml:id="repref3" interactive="activecode" language="python">
    <input>
origlist = [45, 76, 34, 55]

newlist = [origlist] * 3

print(newlist)

origlist[1] = 99

print(newlist)
    </input>
  </program>
  <p>
    <c>newlist</c> shows the change in three places.  This can easily be seen by noting that in the reference diagram, there is only one <c>origlist</c>, so any changes to it appear in all three references from <c>newlist</c>.
  </p>
  <image source="Lists/Figures/refrep2.png" width="50%" alt="Same reference"/>
  <p>Here is the same example in codelens.  Step through the code paying particular attention to the result of executing the assignment statement <c>origlist[1] = 99</c>.
  </p>
  <program xml:id="reprefstep" interactive="codelens" language="python">
    <input>
origlist = [45, 76, 34, 55]

newlist = [origlist] * 3

print(newlist)

origlist[1] = 99

print(newlist)
    </input>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question9_12_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
blist = alist * 2
blist[3] = 999
print(alist)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 999, 5, 4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    print(alist) not print(blist)
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, 2, 8, 999, 5]</p>
        </statement>
        <feedback>
                    blist is changed, not alist.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    Yes, alist was unchanged by the assignment statement. blist was a copy of the references in alist.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question9_12_2">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
blist = [alist] * 2
alist[3] = 999
print(blist)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 999, 5, 4, 2, 8, 999, 5]</p>
        </statement>
        <feedback>
                    [alist] * 2 creates a list containing alist repeated 2 times
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[[4, 2, 8, 999, 5], [4, 2, 8, 999, 5]]</p>
        </statement>
        <feedback>
                    Yes, blist contains two references, both to alist.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    print(blist)
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[[4, 2, 8, 999, 5], [4, 2, 8, 6, 5]]</p>
        </statement>
        <feedback>
                    blist contains two references, both to alist so changes to alist appear both times.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
