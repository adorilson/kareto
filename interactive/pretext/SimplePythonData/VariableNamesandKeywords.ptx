<?xml version="1.0"?>
<section xml:id="simple-python-data_variable-names-and-keywords">
  <title>Variable Names and Keywords</title>
  <p>
    <term>Variable names</term> can be arbitrarily long. They can contain both letters and
            digits, but they have to begin with a letter or an underscore. Although it is
            legal to use uppercase letters, by convention we don't. If you do, remember
            that case matters. <c>Bruce</c> and <c>bruce</c> are different variables.</p>
  <warning>
    <p>Variable names can never contain spaces.</p>
  </warning>
  <p>The underscore character ( <c>_</c>) can also appear in a name. It is often used in
            names with multiple words, such as <c>my_name</c> or <c>price_of_tea_in_china</c>.
            There are some situations in which names beginning with an underscore have
            special meaning, so a safe rule for beginners is to start all names with a
            letter.</p>
  <p>If you give a variable an illegal name, you get a syntax error.  In the example below, each
            of the variable names is illegal.</p>
  <pre>76trombones = "big parade"
more$ = 1000000
class = "Computer Science 101"</pre>
  <p>
    <c>76trombones</c> is illegal because it does not begin with a letter.  <c>more$</c>
            is illegal because it contains an illegal character, the dollar sign. But
            what's wrong with <c>class</c>?
  </p>
  <p>It turns out that <c>class</c> is one of the Python <term>keywords</term>. Keywords define
            the language's syntax rules and structure, and they cannot be used as variable
            names.
            Python has thirty-something keywords (and every now and again improvements to
            Python introduce or eliminate one or two):</p>
  <table>
    <tabular>
      <row>
        <cell>
                            and
        </cell>
        <cell>
                            as
        </cell>
        <cell>
                            assert
        </cell>
        <cell>
                            break
        </cell>
        <cell>
                            class
        </cell>
        <cell>
                            continue
        </cell>
      </row>
      <row>
        <cell>
                            def
        </cell>
        <cell>
                            del
        </cell>
        <cell>
                            elif
        </cell>
        <cell>
                            else
        </cell>
        <cell>
                            except
        </cell>
        <cell>
                            exec
        </cell>
      </row>
      <row>
        <cell>
                            finally
        </cell>
        <cell>
                            for
        </cell>
        <cell>
                            from
        </cell>
        <cell>
                            global
        </cell>
        <cell>
                            if
        </cell>
        <cell>
                            import
        </cell>
      </row>
      <row>
        <cell>
                            in
        </cell>
        <cell>
                            is
        </cell>
        <cell>
                            lambda
        </cell>
        <cell>
                            nonlocal
        </cell>
        <cell>
                            not
        </cell>
        <cell>
                            or
        </cell>
      </row>
      <row>
        <cell>
                            pass
        </cell>
        <cell>
                            raise
        </cell>
        <cell>
                            return
        </cell>
        <cell>
                            try
        </cell>
        <cell>
                            while
        </cell>
        <cell>
                            with
        </cell>
      </row>
      <row>
        <cell>
                            yield
        </cell>
        <cell>
                            True
        </cell>
        <cell>
                            False
        </cell>
        <cell>
                            None
        </cell>
        <cell>
        </cell>
        <cell>
        </cell>
      </row>
    </tabular>
  </table>
  <p>You might want to keep this list handy. If the interpreter complains about one
            of your variable names and you don't know why, see if it is on this list.</p>
  <p>Programmers generally choose names for their variables that are meaningful to
            the human readers of the program &#x2014; they help the programmer document, or
            remember, what the variable is used for.</p>
  <warning>
    <p>Beginners sometimes confuse <q>meaningful to the human readers</q> with
      <q>meaningful to the computer</q>.  So they'll wrongly think that because
                they've called some variable <c>average</c> or <c>pi</c>, it will somehow
                automagically calculate an average, or automagically associate the variable
      <c>pi</c> with the value 3.14159.  No! The computer doesn't attach semantic
                meaning to your variable names.</p>
    <p>So you'll find some instructors who deliberately don't choose meaningful
                names when they teach beginners &#x2014; not because they don't think it is a
                good habit, but because they're trying to reinforce the message that you,
                the programmer, have to write some program code to calculate the average,
                or you must write an assignment statement to give a variable the value you
                want it to have.</p>
  </warning>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question2_4_1">
    <statement>
      <p>True or False:  the following is a legal variable name in Python:   A_good_grade_is_A+</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
                    -  The + character is not allowed in variable names.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
                    -  The + character is not allowed in variable names (everything else in this name is fine).
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
