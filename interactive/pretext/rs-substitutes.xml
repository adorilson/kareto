<substitutes>
    <substitute xml:id='chp13_improveconstructor'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="17.5.1">
                <div class="pytutorVisualizer" id="chp13_improveconstructor" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 17.5.1 (chp13_improveconstructor)</span>
                </p>
            </div>

            <script>
var chp13_improveconstructor_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp13_improveconstructor"] = {"code": "class Point:\n    \"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self, initX, initY):\n        \"\"\" Create a new point at the given coordinates. \"\"\"\n        self.x = initX\n        self.y = initY\n\np = Point(7, 6)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [], "heap": {"1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self, initX, initY)", null]}, "stdout": ""}, {"line": 4, "event": "call", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3], "initX": 7, "initY": 6}, "ordered_varnames": ["self", "initX", "initY"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point"], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self, initX, initY)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3], "initX": 7, "initY": 6}, "ordered_varnames": ["self", "initX", "initY"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point"], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self, initX, initY)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3], "initX": 7, "initY": 6}, "ordered_varnames": ["self", "initX", "initY"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point", ["x", 7]], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self, initX, initY)", null]}, "stdout": ""}, {"line": 7, "event": "return", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3], "initX": 7, "initY": 6, "__return__": null}, "ordered_varnames": ["self", "initX", "initY", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point", ["x", 7], ["y", 6]], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self, initX, initY)", null]}, "stdout": ""}, {"line": 9, "event": "return", "func_name": "&lt;module&gt;", "globals": {"Point": ["REF", 1], "p": ["REF", 3]}, "ordered_globals": ["Point", "p"], "stack_to_render": [], "heap": {"1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self, initX, initY)", null], "3": ["INSTANCE", "Point", ["x", 7], ["y", 6]]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp13_points'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="17.4.2">
                <div class="pytutorVisualizer" id="chp13_points" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 17.4.2 (chp13_points)</span>
                </p>
            </div>

            <script>
var chp13_points_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp13_points"] = {"code": "class Point:\n    \"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self):\n        \"\"\" Create a new point at the origin \"\"\"\n        self.x = 0\n        self.y = 0\n\np = Point()         # Instantiate an object of type Point\nq = Point()         # and make a second point\n\nprint(\"Nothing seems to have happened with the points\")", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [], "heap": {"1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null]}, "stdout": ""}, {"line": 4, "event": "call", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3]}, "ordered_varnames": ["self"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point"], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3]}, "ordered_varnames": ["self"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point"], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3]}, "ordered_varnames": ["self"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point", ["x", 0]], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null]}, "stdout": ""}, {"line": 7, "event": "return", "func_name": "__init__", "globals": {"Point": ["REF", 1]}, "ordered_globals": ["Point"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 3], "__return__": null}, "ordered_varnames": ["self", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f1"}], "heap": {"3": ["INSTANCE", "Point", ["x", 0], ["y", 0]], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null]}, "stdout": ""}, {"line": 10, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"Point": ["REF", 1], "p": ["REF", 3]}, "ordered_globals": ["Point", "p"], "stack_to_render": [], "heap": {"1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null], "3": ["INSTANCE", "Point", ["x", 0], ["y", 0]]}, "stdout": ""}, {"line": 4, "event": "call", "func_name": "__init__", "globals": {"Point": ["REF", 1], "p": ["REF", 3]}, "ordered_globals": ["Point", "p"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 4]}, "ordered_varnames": ["self"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f2"}], "heap": {"4": ["INSTANCE", "Point"], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null], "3": ["INSTANCE", "Point", ["x", 0], ["y", 0]]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "__init__", "globals": {"Point": ["REF", 1], "p": ["REF", 3]}, "ordered_globals": ["Point", "p"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 4]}, "ordered_varnames": ["self"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f2"}], "heap": {"4": ["INSTANCE", "Point"], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null], "3": ["INSTANCE", "Point", ["x", 0], ["y", 0]]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "__init__", "globals": {"Point": ["REF", 1], "p": ["REF", 3]}, "ordered_globals": ["Point", "p"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 4]}, "ordered_varnames": ["self"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f2"}], "heap": {"4": ["INSTANCE", "Point", ["x", 0]], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null], "3": ["INSTANCE", "Point", ["x", 0], ["y", 0]]}, "stdout": ""}, {"line": 7, "event": "return", "func_name": "__init__", "globals": {"Point": ["REF", 1], "p": ["REF", 3]}, "ordered_globals": ["Point", "p"], "stack_to_render": [{"func_name": "__init__", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"self": ["REF", 4], "__return__": null}, "ordered_varnames": ["self", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "__init___f2"}], "heap": {"4": ["INSTANCE", "Point", ["x", 0], ["y", 0]], "1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null], "3": ["INSTANCE", "Point", ["x", 0], ["y", 0]]}, "stdout": ""}, {"line": 12, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"Point": ["REF", 1], "p": ["REF", 3], "q": ["REF", 4]}, "ordered_globals": ["Point", "p", "q"], "stack_to_render": [], "heap": {"1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null], "3": ["INSTANCE", "Point", ["x", 0], ["y", 0]], "4": ["INSTANCE", "Point", ["x", 0], ["y", 0]]}, "stdout": ""}, {"line": 12, "event": "return", "func_name": "&lt;module&gt;", "globals": {"Point": ["REF", 1], "p": ["REF", 3], "q": ["REF", 4]}, "ordered_globals": ["Point", "p", "q"], "stack_to_render": [], "heap": {"1": ["CLASS", "Point", [], ["__init__", ["REF", 2]]], "2": ["FUNCTION", "__init__(self)", null], "3": ["INSTANCE", "Point", ["x", 0], ["y", 0]], "4": ["INSTANCE", "Point", ["x", 0], ["y", 0]]}, "stdout": "Nothing seems to have happened with the points\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch12_dict4'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="12.2.1">
                <div class="pytutorVisualizer" id="ch12_dict4" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 12.2.1 (ch12_dict4)</span>
                </p>
            </div>

            <script>
var ch12_dict4_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch12_dict4"] = {"code": "inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}\n\ndel inventory['pears']", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"inventory": ["REF", 1]}, "ordered_globals": ["inventory"], "stack_to_render": [], "heap": {"1": ["DICT", ["apples", 430], ["bananas", 312], ["oranges", 525], ["pears", 217]]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "&lt;module&gt;", "globals": {"inventory": ["REF", 1]}, "ordered_globals": ["inventory"], "stack_to_render": [], "heap": {"1": ["DICT", ["apples", 430], ["bananas", 312], ["oranges", 525]]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch12_dict4a'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="12.2.2">
                <div class="pytutorVisualizer" id="ch12_dict4a" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 12.2.2 (ch12_dict4a)</span>
                </p>
            </div>

            <script>
var ch12_dict4a_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch12_dict4a"] = {"code": "inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}\n\ninventory['pears'] = 0", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"inventory": ["REF", 1]}, "ordered_globals": ["inventory"], "stack_to_render": [], "heap": {"1": ["DICT", ["apples", 430], ["bananas", 312], ["oranges", 525], ["pears", 217]]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "&lt;module&gt;", "globals": {"inventory": ["REF", 1]}, "ordered_globals": ["inventory"], "stack_to_render": [], "heap": {"1": ["DICT", ["apples", 430], ["bananas", 312], ["oranges", 525], ["pears", 0]]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch12_dict5'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="12.2.3">
                <div class="pytutorVisualizer" id="ch12_dict5" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 12.2.3 (ch12_dict5)</span>
                </p>
            </div>

            <script>
var ch12_dict5_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch12_dict5"] = {"code": "inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}\ninventory['bananas'] = inventory['bananas'] + 200\n\n\nnumItems = len(inventory)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"inventory": ["REF", 1]}, "ordered_globals": ["inventory"], "stack_to_render": [], "heap": {"1": ["DICT", ["apples", 430], ["bananas", 312], ["oranges", 525], ["pears", 217]]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"inventory": ["REF", 1]}, "ordered_globals": ["inventory"], "stack_to_render": [], "heap": {"1": ["DICT", ["apples", 430], ["bananas", 512], ["oranges", 525], ["pears", 217]]}, "stdout": ""}, {"line": 5, "event": "return", "func_name": "&lt;module&gt;", "globals": {"inventory": ["REF", 1], "numItems": 4}, "ordered_globals": ["inventory", "numItems"], "stack_to_render": [], "heap": {"1": ["DICT", ["apples", 430], ["bananas", 512], ["oranges", 525], ["pears", 217]]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp12_dict1'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="12.1.1">
                <div class="pytutorVisualizer" id="chp12_dict1" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 12.1.1 (chp12_dict1)</span>
                </p>
            </div>

            <script>
var chp12_dict1_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp12_dict1"] = {"code": "eng2sp = {}\neng2sp['one'] = 'uno'\neng2sp['two'] = 'dos'\neng2sp['three'] = 'tres'", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1]}, "ordered_globals": ["eng2sp"], "stack_to_render": [], "heap": {"1": ["DICT"]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1]}, "ordered_globals": ["eng2sp"], "stack_to_render": [], "heap": {"1": ["DICT", ["one", "uno"]]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1]}, "ordered_globals": ["eng2sp"], "stack_to_render": [], "heap": {"1": ["DICT", ["one", "uno"], ["two", "dos"]]}, "stdout": ""}, {"line": 4, "event": "return", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1]}, "ordered_globals": ["eng2sp"], "stack_to_render": [], "heap": {"1": ["DICT", ["one", "uno"], ["two", "dos"], ["three", "tres"]]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp12_dict2'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="12.1.2">
                <div class="pytutorVisualizer" id="chp12_dict2" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 12.1.2 (chp12_dict2)</span>
                </p>
            </div>

            <script>
var chp12_dict2_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp12_dict2"] = {"code": "eng2sp = {'three': 'tres', 'one': 'uno', 'two': 'dos'}\nprint(eng2sp)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1]}, "ordered_globals": ["eng2sp"], "stack_to_render": [], "heap": {"1": ["DICT", ["three", "tres"], ["one", "uno"], ["two", "dos"]]}, "stdout": ""}, {"line": 2, "event": "return", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1]}, "ordered_globals": ["eng2sp"], "stack_to_render": [], "heap": {"1": ["DICT", ["three", "tres"], ["one", "uno"], ["two", "dos"]]}, "stdout": "{'three': 'tres', 'one': 'uno', 'two': 'dos'}\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp12_dict3'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="12.1.3">
                <div class="pytutorVisualizer" id="chp12_dict3" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 12.1.3 (chp12_dict3)</span>
                </p>
            </div>

            <script>
var chp12_dict3_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp12_dict3"] = {"code": "eng2sp = {'three': 'tres', 'one': 'uno', 'two': 'dos'}\n\nvalue = eng2sp['two']\nprint(value)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1]}, "ordered_globals": ["eng2sp"], "stack_to_render": [], "heap": {"1": ["DICT", ["three", "tres"], ["one", "uno"], ["two", "dos"]]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1], "value": "dos"}, "ordered_globals": ["eng2sp", "value"], "stack_to_render": [], "heap": {"1": ["DICT", ["three", "tres"], ["one", "uno"], ["two", "dos"]]}, "stdout": ""}, {"line": 4, "event": "return", "func_name": "&lt;module&gt;", "globals": {"eng2sp": ["REF", 1], "value": "dos"}, "ordered_globals": ["eng2sp", "value"], "stack_to_render": [], "heap": {"1": ["DICT", ["three", "tres"], ["one", "uno"], ["two", "dos"]]}, "stdout": "dos\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='sumofsquares'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="6.6.1">
                <div class="pytutorVisualizer" id="sumofsquares" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 6.6.1 (sumofsquares)</span>
                </p>
            </div>

            <script>
var sumofsquares_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["sumofsquares"] = {"code": "def square(x):\n    y = x * x\n    return y\n\ndef sum_of_squares(x, y, z):\n    a = square(x)\n    b = square(y)\n    c = square(z)\n\n    return a + b + c\n\na = -5\nb = 2\nc = 10\nresult = sum_of_squares(a, b, c)\nprint(result)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 12, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2]}, "ordered_globals": ["square", "sum_of_squares"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 13, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5}, "ordered_globals": ["square", "sum_of_squares", "a"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 14, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2}, "ordered_globals": ["square", "sum_of_squares", "a", "b"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 15, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 5, "event": "call", "func_name": "sum_of_squares", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10}, "ordered_varnames": ["x", "y", "z"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sum_of_squares_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "sum_of_squares", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10}, "ordered_varnames": ["x", "y", "z"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sum_of_squares_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10}, "ordered_varnames": ["x", "y", "z"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"x": -5}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f2"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10}, "ordered_varnames": ["x", "y", "z"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"x": -5}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f2"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10}, "ordered_varnames": ["x", "y", "z"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 25}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f2"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10}, "ordered_varnames": ["x", "y", "z"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 2, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 25, "__return__": 25}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f2"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "sum_of_squares", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25}, "ordered_varnames": ["x", "y", "z", "a"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sum_of_squares_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25}, "ordered_varnames": ["x", "y", "z", "a"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 3, "parent_frame_id_list": [], "encoded_locals": {"x": 2}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f3"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25}, "ordered_varnames": ["x", "y", "z", "a"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 3, "parent_frame_id_list": [], "encoded_locals": {"x": 2}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f3"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25}, "ordered_varnames": ["x", "y", "z", "a"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 3, "parent_frame_id_list": [], "encoded_locals": {"x": 2, "y": 4}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f3"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25}, "ordered_varnames": ["x", "y", "z", "a"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 3, "parent_frame_id_list": [], "encoded_locals": {"x": 2, "y": 4, "__return__": 4}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f3"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "sum_of_squares", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25, "b": 4}, "ordered_varnames": ["x", "y", "z", "a", "b"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sum_of_squares_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25, "b": 4}, "ordered_varnames": ["x", "y", "z", "a", "b"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 4, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f4"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25, "b": 4}, "ordered_varnames": ["x", "y", "z", "a", "b"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 4, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f4"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25, "b": 4}, "ordered_varnames": ["x", "y", "z", "a", "b"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 4, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f4"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25, "b": 4}, "ordered_varnames": ["x", "y", "z", "a", "b"], "is_zombie": false, "is_highlighted": false, "unique_hash": "sum_of_squares_f1"}, {"func_name": "square", "is_parent": false, "frame_id": 4, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100, "__return__": 100}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f4"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 10, "event": "step_line", "func_name": "sum_of_squares", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25, "b": 4, "c": 100}, "ordered_varnames": ["x", "y", "z", "a", "b", "c"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sum_of_squares_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 10, "event": "return", "func_name": "sum_of_squares", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c"], "stack_to_render": [{"func_name": "sum_of_squares", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": -5, "y": 2, "z": 10, "a": 25, "b": 4, "c": 100, "__return__": 129}, "ordered_varnames": ["x", "y", "z", "a", "b", "c", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sum_of_squares_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 16, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10, "result": 129}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c", "result"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": ""}, {"line": 16, "event": "return", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "sum_of_squares": ["REF", 2], "a": -5, "b": 2, "c": 10, "result": 129}, "ordered_globals": ["square", "sum_of_squares", "a", "b", "c", "result"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null], "2": ["FUNCTION", "sum_of_squares(x, y, z)", null]}, "stdout": "129\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch04_clsquare'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="6.2.5">
                <div class="pytutorVisualizer" id="ch04_clsquare" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 6.2.5 (ch04_clsquare)</span>
                </p>
            </div>

            <script>
var ch04_clsquare_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch04_clsquare"] = {"code": "def square(x):\n    y = x * x\n    return y\n\ntoSquare = 10\nsquareResult = square(toSquare)\nprint(\"The result of\", toSquare, \"squared is\", squareResult)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100, "__return__": 100}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10, "squareResult": 100}, "ordered_globals": ["square", "toSquare", "squareResult"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 7, "event": "return", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10, "squareResult": 100}, "ordered_globals": ["square", "toSquare", "squareResult"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": "The result of 10 squared is 100\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch04_clsquare_bad'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="6.2.6">
                <div class="pytutorVisualizer" id="ch04_clsquare_bad" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 6.2.6 (ch04_clsquare_bad)</span>
                </p>
            </div>

            <script>
var ch04_clsquare_bad_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch04_clsquare_bad"] = {"code": "def square(x):\n    y = x * x\n    print(y)   # Bad! should use return instead!\n\ntoSquare = 10\nsquareResult = square(toSquare)\nprint(\"The result of\", toSquare, \"squared is\", squareResult)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100, "__return__": null}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": "100\n"}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10, "squareResult": null}, "ordered_globals": ["square", "toSquare", "squareResult"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": "100\n"}, {"line": 7, "event": "return", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10, "squareResult": null}, "ordered_globals": ["square", "toSquare", "squareResult"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": "100\nThe result of 10 squared is None\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='sq_accum3'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="6.5.3">
                <div class="pytutorVisualizer" id="sq_accum3" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 6.5.3 (sq_accum3)</span>
                </p>
            </div>

            <script>
var sq_accum3_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["sq_accum3"] = {"code": "def square(x):\n    runningtotal = 0\n    for counter in range(x):\n        runningtotal = runningtotal + x\n\n    return runningtotal\n\ntoSquare = 10\nsquareResult = square(toSquare)\nprint(\"The result of\", toSquare, \"squared is\", squareResult)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 0}, "ordered_varnames": ["x", "runningtotal"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 0, "counter": 0}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 10, "counter": 0}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 10, "counter": 1}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 20, "counter": 1}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 20, "counter": 2}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 30, "counter": 2}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 30, "counter": 3}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 40, "counter": 3}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 40, "counter": 4}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 50, "counter": 4}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 50, "counter": 5}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 60, "counter": 5}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 60, "counter": 6}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 70, "counter": 6}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 70, "counter": 7}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 80, "counter": 7}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 80, "counter": 8}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 90, "counter": 8}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 90, "counter": 9}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 100, "counter": 9}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 100, "counter": 9}, "ordered_varnames": ["x", "runningtotal", "counter"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 6, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1], "toSquare": 10}, "ordered_globals": ["square", "toSquare"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "runningtotal": 100, "counter": 9, "__return__": 100}, "ordered_varnames": ["x", "runningtotal", "counter", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 10, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10, "squareResult": 100}, "ordered_globals": ["square", "toSquare", "squareResult"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 10, "event": "return", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "toSquare": 10, "squareResult": 100}, "ordered_globals": ["square", "toSquare", "squareResult"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": "The result of 10 squared is 100\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='bad_local'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="6.4.1">
                <div class="pytutorVisualizer" id="bad_local" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 6.4.1 (bad_local)</span>
                </p>
            </div>

            <script>
var bad_local_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["bad_local"] = {"code": "def square(x):\n    y = x * x\n    return y\n\nz = square(10)\nprint(y)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 100, "__return__": 100}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "z": 100}, "ordered_globals": ["square", "z"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 6, "event": "exception", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "z": 100}, "ordered_globals": ["square", "z"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": "", "exception_msg": "NameError: name 'y' is not defined"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='cl_powerof_bad'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="6.4.3">
                <div class="pytutorVisualizer" id="cl_powerof_bad" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 6.4.3 (cl_powerof_bad)</span>
                </p>
            </div>

            <script>
var cl_powerof_bad_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["cl_powerof_bad"] = {"code": "def powerof(x, p):\n    power = p   # Another dumb mistake\n    y = x ** power\n    return y\n\npower = 3\nresult = powerof(10, 2)\nprint(result)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"powerof": ["REF", 1]}, "ordered_globals": ["powerof"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"powerof": ["REF", 1], "power": 3}, "ordered_globals": ["powerof", "power"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "powerof", "globals": {"powerof": ["REF", 1], "power": 3}, "ordered_globals": ["powerof", "power"], "stack_to_render": [{"func_name": "powerof", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "p": 2}, "ordered_varnames": ["x", "p"], "is_zombie": false, "is_highlighted": true, "unique_hash": "powerof_f1"}], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "powerof", "globals": {"powerof": ["REF", 1], "power": 3}, "ordered_globals": ["powerof", "power"], "stack_to_render": [{"func_name": "powerof", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "p": 2}, "ordered_varnames": ["x", "p"], "is_zombie": false, "is_highlighted": true, "unique_hash": "powerof_f1"}], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "powerof", "globals": {"powerof": ["REF", 1], "power": 3}, "ordered_globals": ["powerof", "power"], "stack_to_render": [{"func_name": "powerof", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "p": 2, "power": 2}, "ordered_varnames": ["x", "p", "power"], "is_zombie": false, "is_highlighted": true, "unique_hash": "powerof_f1"}], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "powerof", "globals": {"powerof": ["REF", 1], "power": 3}, "ordered_globals": ["powerof", "power"], "stack_to_render": [{"func_name": "powerof", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "p": 2, "power": 2, "y": 100}, "ordered_varnames": ["x", "p", "power", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "powerof_f1"}], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 4, "event": "return", "func_name": "powerof", "globals": {"powerof": ["REF", 1], "power": 3}, "ordered_globals": ["powerof", "power"], "stack_to_render": [{"func_name": "powerof", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "p": 2, "power": 2, "y": 100, "__return__": 100}, "ordered_varnames": ["x", "p", "power", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "powerof_f1"}], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"powerof": ["REF", 1], "power": 3, "result": 100}, "ordered_globals": ["powerof", "power", "result"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": ""}, {"line": 8, "event": "return", "func_name": "&lt;module&gt;", "globals": {"powerof": ["REF", 1], "power": 3, "result": 100}, "ordered_globals": ["powerof", "power", "result"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "powerof(x, p)", null]}, "stdout": "100\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='cl_change_parm'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="6.4.4">
                <div class="pytutorVisualizer" id="cl_change_parm" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 6.4.4 (cl_change_parm)</span>
                </p>
            </div>

            <script>
var cl_change_parm_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["cl_change_parm"] = {"code": "def square(x):\n    y = x * x\n    x = 0       # assign a new value to the parameter x\n    return y\n\nx = 2\nz = square(x)\nprint(z)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1]}, "ordered_globals": ["square"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "x": 2}, "ordered_globals": ["square", "x"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "square", "globals": {"square": ["REF", 1], "x": 2}, "ordered_globals": ["square", "x"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 2}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "x": 2}, "ordered_globals": ["square", "x"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 2}, "ordered_varnames": ["x"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "x": 2}, "ordered_globals": ["square", "x"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 2, "y": 4}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "square", "globals": {"square": ["REF", 1], "x": 2}, "ordered_globals": ["square", "x"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 0, "y": 4}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 4, "event": "return", "func_name": "square", "globals": {"square": ["REF", 1], "x": 2}, "ordered_globals": ["square", "x"], "stack_to_render": [{"func_name": "square", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 0, "y": 4, "__return__": 4}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "square_f1"}], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "x": 2, "z": 4}, "ordered_globals": ["square", "x", "z"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": ""}, {"line": 8, "event": "return", "func_name": "&lt;module&gt;", "globals": {"square": ["REF", 1], "x": 2, "z": 4}, "ordered_globals": ["square", "x", "z"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "square(x)", null]}, "stdout": "4\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='firstexample'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="1.4.3">
                <div class="pytutorVisualizer" id="firstexample" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 1.4.3 (firstexample)</span>
                </p>
            </div>

            <script>
var firstexample_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["firstexample"] = {"code": "print(\"My first program adds two numbers, 2 and 3:\")\nprint(2 + 3)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": "My first program adds two numbers, 2 and 3:\n"}, {"line": 2, "event": "return", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": "My first program adds two numbers, 2 and 3:\n5\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp09_is3'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.11.2">
                <div class="pytutorVisualizer" id="chp09_is3" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.11.2 (chp09_is3)</span>
                </p>
            </div>

            <script>
var chp09_is3_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp09_is3"] = {"code": "a = [81, 82, 83]\nb = [81, 82, 83]\n\nprint(a == b)\nprint(a is b)\n\nb = a\nprint(a == b)\nprint(a is b)\n\nb[0] = 5\nprint(a)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1]}, "ordered_globals": ["a"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": "True\n"}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": "True\nFalse\n"}, {"line": 8, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 1]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83]}, "stdout": "True\nFalse\n"}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 1]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83]}, "stdout": "True\nFalse\nTrue\n"}, {"line": 11, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 1]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83]}, "stdout": "True\nFalse\nTrue\nTrue\n"}, {"line": 12, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 1]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 5, 82, 83]}, "stdout": "True\nFalse\nTrue\nTrue\n"}, {"line": 12, "event": "return", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 1]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 5, 82, 83]}, "stdout": "True\nFalse\nTrue\nTrue\n[5, 82, 83]\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='appcon1'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.16.1">
                <div class="pytutorVisualizer" id="appcon1" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.16.1 (appcon1)</span>
                </p>
            </div>

            <script>
var appcon1_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["appcon1"] = {"code": "origlist = [45, 32, 88]\n\noriglist.append(\"cat\")", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1]}, "ordered_globals": ["origlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 32, 88]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1]}, "ordered_globals": ["origlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 32, 88, "cat"]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='appcon2'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.16.2">
                <div class="pytutorVisualizer" id="appcon2" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.16.2 (appcon2)</span>
                </p>
            </div>

            <script>
var appcon2_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["appcon2"] = {"code": "origlist = [45, 32, 88]\n\noriglist = origlist + [\"cat\"]", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1]}, "ordered_globals": ["origlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 32, 88]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 2]}, "ordered_globals": ["origlist"], "stack_to_render": [], "heap": {"2": ["LIST", 45, 32, 88, "cat"]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='appcon3'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.16.3">
                <div class="pytutorVisualizer" id="appcon3" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.16.3 (appcon3)</span>
                </p>
            </div>

            <script>
var appcon3_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["appcon3"] = {"code": "origlist = [45, 32, 88]\n\nnewlist = origlist + [\"cat\"]", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1]}, "ordered_globals": ["origlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 32, 88]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1], "newlist": ["REF", 2]}, "ordered_globals": ["origlist", "newlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 32, 88], "2": ["LIST", 45, 32, 88, "cat"]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp09_is4'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.12.1">
                <div class="pytutorVisualizer" id="chp09_is4" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.12.1 (chp09_is4)</span>
                </p>
            </div>

            <script>
var chp09_is4_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp09_is4"] = {"code": "a = [81, 82, 83]\n\nb = a[:]       # make a clone using slice\nprint(a == b)\nprint(a is b)\n\nb[0] = 5\n\nprint(a)\nprint(b)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1]}, "ordered_globals": ["a"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": "True\n"}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": "True\nFalse\n"}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 5, 82, 83]}, "stdout": "True\nFalse\n"}, {"line": 10, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 5, 82, 83]}, "stdout": "True\nFalse\n[81, 82, 83]\n"}, {"line": 10, "event": "return", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 5, 82, 83]}, "stdout": "True\nFalse\n[81, 82, 83]\n[5, 82, 83]\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp09_concatid'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.6.2">
                <div class="pytutorVisualizer" id="chp09_concatid" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.6.2 (chp09_concatid)</span>
                </p>
            </div>

            <script>
var chp09_concatid_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp09_concatid"] = {"code": "fruit = [\"apple\", \"orange\", \"banana\", \"cherry\"]\nnumlist = [6, 7]\n\nnewlist = fruit + numlist\n\nzeros = [0] * 4", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": ["REF", 1]}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {"1": ["LIST", "apple", "orange", "banana", "cherry"]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": ["REF", 1], "numlist": ["REF", 2]}, "ordered_globals": ["fruit", "numlist"], "stack_to_render": [], "heap": {"1": ["LIST", "apple", "orange", "banana", "cherry"], "2": ["LIST", 6, 7]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": ["REF", 1], "numlist": ["REF", 2], "newlist": ["REF", 3]}, "ordered_globals": ["fruit", "numlist", "newlist"], "stack_to_render": [], "heap": {"1": ["LIST", "apple", "orange", "banana", "cherry"], "2": ["LIST", 6, 7], "3": ["LIST", "apple", "orange", "banana", "cherry", 6, 7]}, "stdout": ""}, {"line": 6, "event": "return", "func_name": "&lt;module&gt;", "globals": {"fruit": ["REF", 1], "numlist": ["REF", 2], "newlist": ["REF", 3], "zeros": ["REF", 4]}, "ordered_globals": ["fruit", "numlist", "newlist", "zeros"], "stack_to_render": [], "heap": {"1": ["LIST", "apple", "orange", "banana", "cherry"], "2": ["LIST", 6, 7], "3": ["LIST", "apple", "orange", "banana", "cherry", 6, 7], "4": ["LIST", 0, 0, 0, 0]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='item_assign'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.8.2">
                <div class="pytutorVisualizer" id="item_assign" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.8.2 (item_assign)</span>
                </p>
            </div>

            <script>
var item_assign_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["item_assign"] = {"code": "fruit = [\"banana\", \"apple\", \"cherry\"]\n\nfruit[0] = \"pear\"\nfruit[-1] = \"orange\"", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": ["REF", 1]}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {"1": ["LIST", "banana", "apple", "cherry"]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": ["REF", 1]}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {"1": ["LIST", "pear", "apple", "cherry"]}, "stdout": ""}, {"line": 4, "event": "return", "func_name": "&lt;module&gt;", "globals": {"fruit": ["REF", 1]}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {"1": ["LIST", "pear", "apple", "orange"]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp09_istrace'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.10.3">
                <div class="pytutorVisualizer" id="chp09_istrace" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.10.3 (chp09_istrace)</span>
                </p>
            </div>

            <script>
var chp09_istrace_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp09_istrace"] = {"code": "a = [81, 82, 83]\nb = [81, 82, 83]\n\nprint(a is b)\nprint(a == b)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1]}, "ordered_globals": ["a"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": "False\n"}, {"line": 5, "event": "return", "func_name": "&lt;module&gt;", "globals": {"a": ["REF", 1], "b": ["REF", 2]}, "ordered_globals": ["a", "b"], "stack_to_render": [], "heap": {"1": ["LIST", 81, 82, 83], "2": ["LIST", 81, 82, 83]}, "stdout": "False\nTrue\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch09_mod3'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.20.2">
                <div class="pytutorVisualizer" id="ch09_mod3" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.20.2 (ch09_mod3)</span>
                </p>
            </div>

            <script>
var ch09_mod3_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch09_mod3"] = {"code": "def doubleStuff(a_list):\n    \"\"\" Return a new list in which contains doubles of the elements in a_list. \"\"\"\n    new_list = []\n    for value in a_list:\n        new_elem = 2 * value\n        new_list.append(new_elem)\n    return new_list\n\nthings = [2, 5, 9]\nthings = doubleStuff(things)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"doubleStuff": ["REF", 1]}, "ordered_globals": ["doubleStuff"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 10, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "doubleStuff(a_list)", null], "2": ["LIST", 2, 5, 9]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2]}, "ordered_varnames": ["a_list"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2]}, "ordered_varnames": ["a_list"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3]}, "ordered_varnames": ["a_list", "new_list"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST"], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 2}, "ordered_varnames": ["a_list", "new_list", "value"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST"], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 2, "new_elem": 4}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST"], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 2, "new_elem": 4}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 5, "new_elem": 4}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 5, "new_elem": 10}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 5, "new_elem": 10}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4, 10], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 9, "new_elem": 10}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4, 10], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 9, "new_elem": 18}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4, 10], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 9, "new_elem": 18}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4, 10, 18], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 9, "new_elem": 18}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4, 10, 18], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 7, "event": "return", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"a_list": ["REF", 2], "new_list": ["REF", 3], "value": 9, "new_elem": 18, "__return__": ["REF", 3]}, "ordered_varnames": ["a_list", "new_list", "value", "new_elem", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "3": ["LIST", 4, 10, 18], "1": ["FUNCTION", "doubleStuff(a_list)", null]}, "stdout": ""}, {"line": 10, "event": "return", "func_name": "&lt;module&gt;", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 3]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "doubleStuff(a_list)", null], "3": ["LIST", 4, 10, 18]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='reprefstep'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.13.4">
                <div class="pytutorVisualizer" id="reprefstep" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.13.4 (reprefstep)</span>
                </p>
            </div>

            <script>
var reprefstep_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["reprefstep"] = {"code": "origlist = [45, 76, 34, 55]\n\nnewlist = [origlist] * 3\n\nprint(newlist)\n\noriglist[1] = 99\n\nprint(newlist)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1]}, "ordered_globals": ["origlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 76, 34, 55]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1], "newlist": ["REF", 2]}, "ordered_globals": ["origlist", "newlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 76, 34, 55], "2": ["LIST", ["REF", 1], ["REF", 1], ["REF", 1]]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1], "newlist": ["REF", 2]}, "ordered_globals": ["origlist", "newlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 76, 34, 55], "2": ["LIST", ["REF", 1], ["REF", 1], ["REF", 1]]}, "stdout": "[[45, 76, 34, 55], [45, 76, 34, 55], [45, 76, 34, 55]]\n"}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1], "newlist": ["REF", 2]}, "ordered_globals": ["origlist", "newlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 99, 34, 55], "2": ["LIST", ["REF", 1], ["REF", 1], ["REF", 1]]}, "stdout": "[[45, 76, 34, 55], [45, 76, 34, 55], [45, 76, 34, 55]]\n"}, {"line": 9, "event": "return", "func_name": "&lt;module&gt;", "globals": {"origlist": ["REF", 1], "newlist": ["REF", 2]}, "ordered_globals": ["origlist", "newlist"], "stack_to_render": [], "heap": {"1": ["LIST", 45, 99, 34, 55], "2": ["LIST", ["REF", 1], ["REF", 1], ["REF", 1]]}, "stdout": "[[45, 76, 34, 55], [45, 76, 34, 55], [45, 76, 34, 55]]\n[[45, 99, 34, 55], [45, 99, 34, 55], [45, 99, 34, 55]]\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp09_parm1_trace'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="10.19.2">
                <div class="pytutorVisualizer" id="chp09_parm1_trace" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 10.19.2 (chp09_parm1_trace)</span>
                </p>
            </div>

            <script>
var chp09_parm1_trace_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp09_parm1_trace"] = {"code": "def doubleStuff(aList):\n    \"\"\" Overwrite each element in aList with double its value. \"\"\"\n    for position in range(len(aList)):\n        aList[position] = 2 * aList[position]\n\nthings = [2, 5, 9]\n\ndoubleStuff(things)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"doubleStuff": ["REF", 1]}, "ordered_globals": ["doubleStuff"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "doubleStuff(aList)", null], "2": ["LIST", 2, 5, 9]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2]}, "ordered_varnames": ["aList"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2]}, "ordered_varnames": ["aList"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2], "position": 0}, "ordered_varnames": ["aList", "position"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 2, 5, 9], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2], "position": 0}, "ordered_varnames": ["aList", "position"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 4, 5, 9], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2], "position": 1}, "ordered_varnames": ["aList", "position"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 4, 5, 9], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2], "position": 1}, "ordered_varnames": ["aList", "position"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 4, 10, 9], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2], "position": 2}, "ordered_varnames": ["aList", "position"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 4, 10, 9], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2], "position": 2}, "ordered_varnames": ["aList", "position"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 4, 10, 18], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 3, "event": "return", "func_name": "doubleStuff", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [{"func_name": "doubleStuff", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aList": ["REF", 2], "position": 2, "__return__": null}, "ordered_varnames": ["aList", "position", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "doubleStuff_f1"}], "heap": {"2": ["LIST", 4, 10, 18], "1": ["FUNCTION", "doubleStuff(aList)", null]}, "stdout": ""}, {"line": 8, "event": "return", "func_name": "&lt;module&gt;", "globals": {"doubleStuff": ["REF", 1], "things": ["REF", 2]}, "ordered_globals": ["doubleStuff", "things"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "doubleStuff(aList)", null], "2": ["LIST", 4, 10, 18]}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='nested2'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="8.11.3.2">
                <div class="pytutorVisualizer" id="nested2" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 8.11.3.2 (nested2)</span>
                </p>
            </div>

            <script>
var nested2_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["nested2"] = {"code": "for i in range(5):\n    for j in range(3):\n        print(i, j)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 0}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n4 0\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n4 0\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 1}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n4 0\n4 1\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n4 0\n4 1\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n4 0\n4 1\n4 2\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n4 0\n4 1\n4 2\n"}, {"line": 1, "event": "return", "func_name": "&lt;module&gt;", "globals": {"i": 4, "j": 2}, "ordered_globals": ["i", "j"], "stack_to_render": [], "heap": {}, "stdout": "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n4 0\n4 1\n4 2\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='chp07_newtonswhile'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="8.6.2">
                <div class="pytutorVisualizer" id="chp07_newtonswhile" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 8.6.2 (chp07_newtonswhile)</span>
                </p>
            </div>

            <script>
var chp07_newtonswhile_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["chp07_newtonswhile"] = {"code": "def newtonSqrt(n):\n    approx = 0.5 * n\n    better = 0.5 * (approx + n/approx)\n    while better != approx:\n        approx = better\n        better = 0.5 * (approx + n/approx)\n    return approx\n\nprint(newtonSqrt(10))", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10}, "ordered_varnames": ["n"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10}, "ordered_varnames": ["n"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": ["SPECIAL_FLOAT", "5.0"]}, "ordered_varnames": ["n", "approx"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": ["SPECIAL_FLOAT", "5.0"], "better": 3.5}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": ["SPECIAL_FLOAT", "5.0"], "better": 3.5}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.5, "better": 3.5}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.5, "better": 3.1786}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.5, "better": 3.1786}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1786, "better": 3.1786}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1786, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1786, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623}, "ordered_varnames": ["n", "approx", "better"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 7, "event": "return", "func_name": "newtonSqrt", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [{"func_name": "newtonSqrt", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"n": 10, "approx": 3.1623, "better": 3.1623, "__return__": 3.1623}, "ordered_varnames": ["n", "approx", "better", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "newtonSqrt_f1"}], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": ""}, {"line": 9, "event": "return", "func_name": "&lt;module&gt;", "globals": {"newtonSqrt": ["REF", 1]}, "ordered_globals": ["newtonSqrt"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "newtonSqrt(n)", null]}, "stdout": "3.162277660168379\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch07_while2'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="8.3.3">
                <div class="pytutorVisualizer" id="ch07_while2" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 8.3.3 (ch07_while2)</span>
                </p>
            </div>

            <script>
var ch07_while2_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch07_while2"] = {"code": "def sumTo(aBound):\n    \"\"\" Return the sum of 1+2+3 ... n \"\"\"\n\n    theSum  = 0\n    aNumber = 1\n    while aNumber &lt;= aBound:\n        theSum = theSum + aNumber\n        aNumber = aNumber + 1\n    return theSum\n\nprint(sumTo(4))", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 11, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4}, "ordered_varnames": ["aBound"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4}, "ordered_varnames": ["aBound"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 0}, "ordered_varnames": ["aBound", "theSum"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 0, "aNumber": 1}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 0, "aNumber": 1}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 1, "aNumber": 1}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 1, "aNumber": 2}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 1, "aNumber": 2}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 3, "aNumber": 2}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 3, "aNumber": 3}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 3, "aNumber": 3}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 6, "aNumber": 3}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 6, "aNumber": 4}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 6, "aNumber": 4}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 8, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 10, "aNumber": 4}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 10, "aNumber": 5}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 9, "event": "step_line", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 10, "aNumber": 5}, "ordered_varnames": ["aBound", "theSum", "aNumber"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 9, "event": "return", "func_name": "sumTo", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [{"func_name": "sumTo", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"aBound": 4, "theSum": 10, "aNumber": 5, "__return__": 10}, "ordered_varnames": ["aBound", "theSum", "aNumber", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "sumTo_f1"}], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": ""}, {"line": 11, "event": "return", "func_name": "&lt;module&gt;", "globals": {"sumTo": ["REF", 1]}, "ordered_globals": ["sumTo"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "sumTo(aBound)", null]}, "stdout": "10\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='vtest'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="4.5.1">
                <div class="pytutorVisualizer" id="vtest" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 4.5.1 (vtest)</span>
                </p>
            </div>

            <script>
var vtest_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["vtest"] = {"code": "for name in [\"Joe\", \"Amy\", \"Brad\", \"Angelina\", \"Zuki\", \"Thandi\", \"Paris\"]:\n    print(\"Hi \", name, \"  Please come to my party on Saturday!\")", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Joe"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Joe"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Amy"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Amy"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Brad"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Brad"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Angelina"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Angelina"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Zuki"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Zuki"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\nHi  Zuki   Please come to my party on Saturday!\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Thandi"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\nHi  Zuki   Please come to my party on Saturday!\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Thandi"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\nHi  Zuki   Please come to my party on Saturday!\nHi  Thandi   Please come to my party on Saturday!\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Paris"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\nHi  Zuki   Please come to my party on Saturday!\nHi  Thandi   Please come to my party on Saturday!\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"name": "Paris"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\nHi  Zuki   Please come to my party on Saturday!\nHi  Thandi   Please come to my party on Saturday!\nHi  Paris   Please come to my party on Saturday!\n"}, {"line": 1, "event": "return", "func_name": "&lt;module&gt;", "globals": {"name": "Paris"}, "ordered_globals": ["name"], "stack_to_render": [], "heap": {}, "stdout": "Hi  Joe   Please come to my party on Saturday!\nHi  Amy   Please come to my party on Saturday!\nHi  Brad   Please come to my party on Saturday!\nHi  Angelina   Please come to my party on Saturday!\nHi  Zuki   Please come to my party on Saturday!\nHi  Thandi   Please come to my party on Saturday!\nHi  Paris   Please come to my party on Saturday!\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='rangeme'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="4.7.3">
                <div class="pytutorVisualizer" id="rangeme" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 4.7.3 (rangeme)</span>
                </p>
            </div>

            <script>
var rangeme_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["rangeme"] = {"code": "for i in range(10):\n   print(i)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 1}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 3}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 5}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 5}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 6}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 6}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 7}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 7}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n7\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 8}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n7\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 8}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n7\n8\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 9}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n7\n8\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 9}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"}, {"line": 1, "event": "return", "func_name": "&lt;module&gt;", "globals": {"i": 9}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='rangeme2'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="4.7.5">
                <div class="pytutorVisualizer" id="rangeme2" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 4.7.5 (rangeme2)</span>
                </p>
            </div>

            <script>
var rangeme2_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["rangeme2"] = {"code": "for i in range(0, 20, 2):\n   print(i)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 0}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 2}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 4}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 6}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 6}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 8}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 8}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 10}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 10}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 12}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 12}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 14}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 14}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n14\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 16}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n14\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 16}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n14\n16\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 18}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n14\n16\n"}, {"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"i": 18}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n"}, {"line": 1, "event": "return", "func_name": "&lt;module&gt;", "globals": {"i": 18}, "ordered_globals": ["i"], "stack_to_render": [], "heap": {}, "stdout": "0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch06_boolcodelens'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="7.8.3">
                <div class="pytutorVisualizer" id="ch06_boolcodelens" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 7.8.3 (ch06_boolcodelens)</span>
                </p>
            </div>

            <script>
var ch06_boolcodelens_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch06_boolcodelens"] = {"code": "def isDivisible(x, y):\n    return x % y == 0\n\nif isDivisible(10, 5):\n    print(\"That works\")\nelse:\n    print(\"Those values are no good\")", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "isDivisible", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [{"func_name": "isDivisible", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 5}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "isDivisible_f1"}], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "isDivisible", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [{"func_name": "isDivisible", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 5}, "ordered_varnames": ["x", "y"], "is_zombie": false, "is_highlighted": true, "unique_hash": "isDivisible_f1"}], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 2, "event": "return", "func_name": "isDivisible", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [{"func_name": "isDivisible", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"x": 10, "y": 5, "__return__": true}, "ordered_varnames": ["x", "y", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "isDivisible_f1"}], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": ""}, {"line": 5, "event": "return", "func_name": "&lt;module&gt;", "globals": {"isDivisible": ["REF", 1]}, "ordered_globals": ["isDivisible"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "isDivisible(x, y)", null]}, "stdout": "That works\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='sel1'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="7.6.2">
                <div class="pytutorVisualizer" id="sel1" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 7.6.2 (sel1)</span>
                </p>
            </div>

            <script>
var sel1_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["sel1"] = {"code": "x = 10\ny = 10\n\nif x &lt; y:\n    print(\"x is less than y\")\nelse:\n    if x &gt; y:\n        print(\"x is greater than y\")\n    else:\n        print(\"x and y must be equal\")", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"x": 10}, "ordered_globals": ["x"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"x": 10, "y": 10}, "ordered_globals": ["x", "y"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"x": 10, "y": 10}, "ordered_globals": ["x", "y"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 10, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"x": 10, "y": 10}, "ordered_globals": ["x", "y"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 10, "event": "return", "func_name": "&lt;module&gt;", "globals": {"x": 10, "y": 10}, "ordered_globals": ["x", "y"], "stack_to_render": [], "heap": {}, "stdout": "x and y must be equal\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='se_tq631'>
        <div data-component="showeval" data-question_label="7.3.3" class="runestone explainer " id="se_tq631" data-tracemode="true">
            <button class="btn btn-success" id="se_tq631_nextStep">Next Step</button>
            <button class="btn btn-default" id="se_tq631_reset">Reset</button>
            <div class="evalCont" style="background-color: #FDFDFD;">
                5 * 3 > 10 and 4 + 6 == 11
                <br />
            </div>
            <div class="evalCont"></div>
            <script>
    if (typeof window.raw_steps === "undefined") {
    window.raw_steps = {};
    }
    raw_steps["se_tq631"] = ['\\{\\{5 * 3}}\\{\\{15}} > 10 and 4 + 6 == 11', '\\{\\{15 > 10}}\\{\\{True}} and 4 + 6 == 11', 'True and \\{\\{4 + 6}}\\{\\{10}} == 11', 'True and \\{\\{10 == 11}}\\{\\{False}}', '\\{\\{True and False}}\\{\\{False}}'];
    </script>
        </div>
    </substitute>
    <substitute xml:id='ca_id_ints'>
        <dbfetch>ca_id_ints</dbfetch>
    </substitute>
    <substitute xml:id='ca_id_str'>
        <dbfetch>ca_id_str</dbfetch>
    </substitute>
    <substitute xml:id='ch02_19_codelens'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="2.7.5">
                <div class="pytutorVisualizer" id="ch02_19_codelens" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 2.7.5 (ch02_19_codelens)</span>
                </p>
            </div>

            <script>
var ch02_19_codelens_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch02_19_codelens"] = {"code": "total_secs = 7684\nhours = total_secs // 3600\nsecs_still_remaining = total_secs % 3600\nminutes =  secs_still_remaining // 60\nsecs_finally_remaining = secs_still_remaining  % 60", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"total_secs": 7684}, "ordered_globals": ["total_secs"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"total_secs": 7684, "hours": 2}, "ordered_globals": ["total_secs", "hours"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"total_secs": 7684, "hours": 2, "secs_still_remaining": 484}, "ordered_globals": ["total_secs", "hours", "secs_still_remaining"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"total_secs": 7684, "hours": 2, "secs_still_remaining": 484, "minutes": 8}, "ordered_globals": ["total_secs", "hours", "secs_still_remaining", "minutes"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "return", "func_name": "&lt;module&gt;", "globals": {"total_secs": 7684, "hours": 2, "secs_still_remaining": 484, "minutes": 8, "secs_finally_remaining": 4}, "ordered_globals": ["total_secs", "hours", "secs_still_remaining", "minutes", "secs_finally_remaining"], "stack_to_render": [], "heap": {}, "stdout": ""}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='se_tq281'>
        <div data-component="showeval" data-question_label="2.9.5" class="runestone explainer " id="se_tq281" data-tracemode="true">
            <button class="btn btn-success" id="se_tq281_nextStep">Next Step</button>
            <button class="btn btn-default" id="se_tq281_reset">Reset</button>
            <div class="evalCont" style="background-color: #FDFDFD;">
                16 - 2 * 5 // 3 + 1
                <br />
            </div>
            <div class="evalCont"></div>
            <script>
    if (typeof window.raw_steps === "undefined") {
    window.raw_steps = {};
    }
    raw_steps["se_tq281"] = ['16 - \\{\\{2 * 5}}\\{\\{10}} // 3 + 1', '16 - \\{\\{10 // 3}}\\{\\{3}} + 1', '\\{\\{16 - 3}}\\{\\{13}} + 1', '\\{\\{13 + 1}}\\{\\{14}}'];
    </script>
        </div>
    </substitute>
    <substitute xml:id='se_tq282'>
        <div data-component="showeval" data-question_label="2.9.6" class="runestone explainer " id="se_tq282" data-tracemode="true">
            <button class="btn btn-success" id="se_tq282_nextStep">Next Step</button>
            <button class="btn btn-default" id="se_tq282_reset">Reset</button>
            <div class="evalCont" style="background-color: #FDFDFD;">
                2 ** 2 ** 3 * 3
                <br />
            </div>
            <div class="evalCont"></div>
            <script>
    if (typeof window.raw_steps === "undefined") {
    window.raw_steps = {};
    }
    raw_steps["se_tq282"] = ['2 ** \\{\\{2 ** 3}}\\{\\{8}} * 3', '\\{\\{2 ** 8}}\\{\\{256}} * 3', '\\{\\{256 * 3}}\\{\\{768}}'];
    </script>
        </div>
    </substitute>
    <substitute xml:id='se_reassign'>
        <div data-component="showeval" data-question_label="2.10.1.1" class="runestone explainer " id="se_reassign" data-tracemode="true">
            <button class="btn btn-success" id="se_reassign_nextStep">Next Step</button>
            <button class="btn btn-default" id="se_reassign_reset">Reset</button>
            <div class="evalCont" style="background-color: #FDFDFD;">
                a = 5
                <br />
                b = a
                <br />
            </div>
            <div class="evalCont"></div>
            <script>
    if (typeof window.raw_steps === "undefined") {
    window.raw_steps = {};
    }
    raw_steps["se_reassign"] = ['a = \\{\\{5}}\\{\\{5}}', 'b = \\{\\{a}}\\{\\{5}}'];
    </script>
        </div>
    </substitute>
    <substitute xml:id='se_updatevar1'>
        <div data-component="showeval" data-question_label="2.11.2" class="runestone explainer " id="se_updatevar1" data-tracemode="true">
            <button class="btn btn-success" id="se_updatevar1_nextStep">Next Step</button>
            <button class="btn btn-default" id="se_updatevar1_reset">Reset</button>
            <div class="evalCont" style="background-color: #FDFDFD;">
                x = 6
                <br />
                x = x + 1
                <br />
            </div>
            <div class="evalCont"></div>
            <script>
    if (typeof window.raw_steps === "undefined") {
    window.raw_steps = {};
    }
    raw_steps["se_updatevar1"] = ['x = \\{\\{x}}\\{\\{6}} + 1', 'x = 6 + \\{\\{1}}\\{\\{1}}', 'x = \\{\\{6 + 1}}\\{\\{7}}'];
    </script>
        </div>
    </substitute>
    <substitute xml:id='ch02_9_cl'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="2.4.3">
                <div class="pytutorVisualizer" id="ch02_9_cl" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 2.4.3 (ch02_9_cl)</span>
                </p>
            </div>

            <script>
var ch02_9_cl_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch02_9_cl"] = {"code": "message = \"What's up, Doc?\"\nn = 17\npi = 3.14159\n\nprint(message)\nprint(n)\nprint(pi)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"message": "What's up, Doc?"}, "ordered_globals": ["message"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"message": "What's up, Doc?", "n": 17}, "ordered_globals": ["message", "n"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"message": "What's up, Doc?", "n": 17, "pi": 3.1416}, "ordered_globals": ["message", "n", "pi"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"message": "What's up, Doc?", "n": 17, "pi": 3.1416}, "ordered_globals": ["message", "n", "pi"], "stack_to_render": [], "heap": {}, "stdout": "What's up, Doc?\n"}, {"line": 7, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"message": "What's up, Doc?", "n": 17, "pi": 3.1416}, "ordered_globals": ["message", "n", "pi"], "stack_to_render": [], "heap": {}, "stdout": "What's up, Doc?\n17\n"}, {"line": 7, "event": "return", "func_name": "&lt;module&gt;", "globals": {"message": "What's up, Doc?", "n": 17, "pi": 3.1416}, "ordered_globals": ["message", "n", "pi"], "stack_to_render": [], "heap": {}, "stdout": "What's up, Doc?\n17\n3.14159\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch02_11'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="2.4.5">
                <div class="pytutorVisualizer" id="ch02_11" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 2.4.5 (ch02_11)</span>
                </p>
            </div>

            <script>
var ch02_11_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch02_11"] = {"code": "day = \"Thursday\"\nprint(day)\nday = \"Friday\"\nprint(day)\nday = 21\nprint(day)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"day": "Thursday"}, "ordered_globals": ["day"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"day": "Thursday"}, "ordered_globals": ["day"], "stack_to_render": [], "heap": {}, "stdout": "Thursday\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"day": "Friday"}, "ordered_globals": ["day"], "stack_to_render": [], "heap": {}, "stdout": "Thursday\n"}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"day": "Friday"}, "ordered_globals": ["day"], "stack_to_render": [], "heap": {}, "stdout": "Thursday\nFriday\n"}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"day": 21}, "ordered_globals": ["day"], "stack_to_render": [], "heap": {}, "stdout": "Thursday\nFriday\n"}, {"line": 6, "event": "return", "func_name": "&lt;module&gt;", "globals": {"day": 21}, "ordered_globals": ["day"], "stack_to_render": [], "heap": {}, "stdout": "Thursday\nFriday\n21\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch08_acc2'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="9.14.2">
                <div class="pytutorVisualizer" id="ch08_acc2" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 9.14.2 (ch08_acc2)</span>
                </p>
            </div>

            <script>
var ch08_acc2_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch08_acc2"] = {"code": "def removeVowels(s):\n    vowels = \"aeiouAEIOU\"\n    sWithoutVowels = \"\"\n    for eachChar in s:\n        if eachChar not in vowels:\n            sWithoutVowels = sWithoutVowels + eachChar\n    return sWithoutVowels\n\nprint(removeVowels(\"compsci\"))", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 9, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 1, "event": "call", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci"}, "ordered_varnames": ["s"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci"}, "ordered_varnames": ["s"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU"}, "ordered_varnames": ["s", "vowels"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": ""}, "ordered_varnames": ["s", "vowels", "sWithoutVowels"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "", "eachChar": "c"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "", "eachChar": "c"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "c", "eachChar": "c"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "c", "eachChar": "o"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "c", "eachChar": "o"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "c", "eachChar": "m"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "c", "eachChar": "m"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cm", "eachChar": "m"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cm", "eachChar": "p"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cm", "eachChar": "p"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmp", "eachChar": "p"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmp", "eachChar": "s"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmp", "eachChar": "s"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmps", "eachChar": "s"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmps", "eachChar": "c"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmps", "eachChar": "c"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmpsc", "eachChar": "c"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmpsc", "eachChar": "i"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmpsc", "eachChar": "i"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 7, "event": "step_line", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmpsc", "eachChar": "i"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 7, "event": "return", "func_name": "removeVowels", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [{"func_name": "removeVowels", "is_parent": false, "frame_id": 1, "parent_frame_id_list": [], "encoded_locals": {"s": "compsci", "vowels": "aeiouAEIOU", "sWithoutVowels": "cmpsc", "eachChar": "i", "__return__": "cmpsc"}, "ordered_varnames": ["s", "vowels", "sWithoutVowels", "eachChar", "__return__"], "is_zombie": false, "is_highlighted": true, "unique_hash": "removeVowels_f1"}], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": ""}, {"line": 9, "event": "return", "func_name": "&lt;module&gt;", "globals": {"removeVowels": ["REF", 1]}, "ordered_globals": ["removeVowels"], "stack_to_render": [], "heap": {"1": ["FUNCTION", "removeVowels(s)", null]}, "stdout": "cmpsc\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch08_7'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="9.11.1">
                <div class="pytutorVisualizer" id="ch08_7" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 9.11.1 (ch08_7)</span>
                </p>
            </div>

            <script>
var ch08_7_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch08_7"] = {"code": "fruit = \"apple\"\nfor idx in range(5):\n    currentChar = fruit[idx]\n    print(currentChar)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple"}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 0}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 0, "currentChar": "a"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 0, "currentChar": "a"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 1, "currentChar": "a"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 1, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 1, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 2, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 2, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 2, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 3, "currentChar": "p"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 3, "currentChar": "l"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 3, "currentChar": "l"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 4, "currentChar": "l"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 4, "currentChar": "e"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 4, "currentChar": "e"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\ne\n"}, {"line": 2, "event": "return", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 4, "currentChar": "e"}, "ordered_globals": ["fruit", "idx", "currentChar"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\ne\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch08_8'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="9.11.3">
                <div class="pytutorVisualizer" id="ch08_8" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 9.11.3 (ch08_8)</span>
                </p>
            </div>

            <script>
var ch08_8_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch08_8"] = {"code": "fruit = \"apple\"\nfor idx in range(len(fruit)-1, -1, -1):\n    print(fruit[idx])", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple"}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 4}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 4}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 3}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 3}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 2}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 2}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\np\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 1}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\np\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 1}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\np\np\n"}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 0}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\np\np\n"}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 0}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\np\np\na\n"}, {"line": 2, "event": "return", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "idx": 0}, "ordered_globals": ["fruit", "idx"], "stack_to_render": [], "heap": {}, "stdout": "e\nl\np\np\na\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='ch08_7c1'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="9.12.2">
                <div class="pytutorVisualizer" id="ch08_7c1" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 9.12.2 (ch08_7c1)</span>
                </p>
            </div>

            <script>
var ch08_7c1_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["ch08_7c1"] = {"code": "fruit = \"apple\"\n\nposition = 0\nwhile position &lt; len(fruit):\n    print(fruit[position])\n    position = position + 1", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 3, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple"}, "ordered_globals": ["fruit"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 0}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 0}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 0}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 1}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 1}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\n"}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 1}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 2}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 2}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\n"}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 2}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 3}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 3}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\n"}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 3}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 4}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 5, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 4}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\n"}, {"line": 6, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 4}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\ne\n"}, {"line": 4, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 5}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\ne\n"}, {"line": 4, "event": "return", "func_name": "&lt;module&gt;", "globals": {"fruit": "apple", "position": 5}, "ordered_globals": ["fruit", "position"], "stack_to_render": [], "heap": {}, "stdout": "a\np\np\nl\ne\n"}]};
</script>
        </div>
    </substitute>
    <substitute xml:id='nav_firstexample_cl'>
        <div class="runestone codelens ">
            <div class=" cd_section" data-component="codelens" data-question_label="2">
                <div class="pytutorVisualizer" id="nav_firstexample_cl" data-params='{"embeddedMode": true, "lang": "python", "jumpToEnd": false}'></div>
                <p class="runestone_caption">
                    <span class="runestone_caption_text">Activity: CodeLens 2 (nav_firstexample_cl)</span>
                </p>
            </div>

            <script>
var nav_firstexample_cl_vis;

if (allTraceData === undefined) {
   var allTraceData = {};
}

allTraceData["nav_firstexample_cl"] = {"code": "print(\"My first program adds two numbers, 2 and 3:\")\nprint(2 + 3)", "trace": [{"line": 1, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 2, "event": "step_line", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": "My first program adds two numbers, 2 and 3:\n"}, {"line": 2, "event": "return", "func_name": "&lt;module&gt;", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": "My first program adds two numbers, 2 and 3:\n5\n"}]};
</script>
        </div>
    </substitute>
</substitutes>